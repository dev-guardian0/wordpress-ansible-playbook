---
## this only sets up non ssl.  The letsencrypt role will setup ssl.
- name: Add Nginx repo
  apt_repository:
    repo: ppa:nginx/development

- name: Install Nginx
  apt:
    name: nginx
    state: present
    force: yes
    update_cache: yes

- name: Check Nginx configs exist
  stat: path=/etc/nginx/.git
  register: git_exists

- name: Remove default Nginx configs
  file:
    path: /etc/nginx
    state: absent
  when: not git_exists.stat.exists

- name: Clone Nginx configs
  git:
    repo: "{{ nginx_config_repo }}"
    dest: /etc/nginx
    version: "{{ nginx_config_repo_version }}"
    force: yes
  when: not git_exists.stat.exists

- name: Set Nginx user
  lineinfile:
    dest: /etc/nginx/nginx.conf
    regexp: "^user"
    line: "user {{ remote_web_user }};"
    state: present
  notify: restart nginx

- name: Copy non-ssl and ssl configuration to new domain based configuration.
  copy:
    remote_src: yes
    src: /etc/nginx/sites-available/{{ item.src }}
    dest: /etc/nginx/sites-available/{{ item.dest }}
    force: no
  with_items:
    -
      src: singlesite.com
      dest: "{{ domain }}.nonssl.conf"
    -
      src: ssl.com
      dest: "{{ domain }}.ssl.conf"

- name: Remove www redirect in staging configuration
  replace:
    path: /etc/nginx/sites-available/{{ item }}
    regexp: '# Redirect www to non-www[\s\w\d\W]+'
    replace: ''
  when: domain == staging_domain
  with_items:
    - "{{ domain }}.nonssl.conf"
    - "{{ domain }}.ssl.conf"

- name: Remove www domain from server name item in staging conf
  replace:
    path: "/etc/nginx/sites-available/{{ item.filename }}"
    regexp: "{{ item.regexp }}"
    replace: ''
  when: domain == staging_domain
  with_items:
    -
      filename: "{{ domain }}.nonssl.conf"
      regexp: ' www\.singlesite\.com'
    -
      filename: "{{ domain }}.ssl.conf"
      regexp: ' www\.ssl\.com'

- name: Modify root path directive configuration.
  replace:
    dest: "/etc/nginx/sites-available/{{ item.filename }}"
    regexp: "{{ item.regexp }}"
    replace: '\1/home/{{ remote_web_user }}/www/{{ domain }}\2'
  with_items:
    -
      filename: "{{ domain }}.nonssl.conf"
      regexp: '(\s)\/sites\/singlesite\.com\/public(;)?$'
    -
      filename: "{{ domain }}.ssl.conf"
      regexp: '(\s)\/sites\/ssl\.com\/public(;)?$'

- name: Replace template domain in configuration files with the actual domain
  replace:
    path: "/etc/nginx/sites-available/{{ item.filename }}"
    regexp: "{{ item.regexp }}"
    replace: '\1{{ domain }}\2'
  with_items:
    -
      filename: "{{ domain }}.nonssl.conf"
      regexp: '(\s+|/|\.)singlesite\.com(\s|/|\$|;)'
    -
      filename: "{{ domain }}.ssl.conf"
      regexp: '(\s+|/|\.)ssl\.com(\s|/|\$|;)'

- name: Modify lets encrypt to point to its own folder for authorization
  replace:
    path: /etc/nginx/sites-available/{{ domain }}.nonssl.conf
    regexp: '(\s)\/sites\/letsencrypt\/public(;)?$'
    replace: '\1/home/{{ remote_web_user }}/www/letsencrypt\2'

- name: Modify access_log path directive for configuration.
  lineinfile:
    dest: "/etc/nginx/sites-available/{{ item }}"
    regexp: "access_log"
    line: "access_log /home/{{ remote_web_user }}/www/{{ domain }}/logs/access.log;"
    state: present
  with_items:
    - "{{ domain }}.nonssl.conf"
    - "{{ domain }}.ssl.conf"

- name: Modify error_log path directive for all domain
  lineinfile:
    dest: "/etc/nginx/sites-available/{{ item }}"
    regexp: "error_log"
    line: "error_log /home/{{ remote_web_user }}/www/{{ domain }}/logs/error.log;"
    state: present
  with_items:
    - "{{ domain }}.nonssl.conf"
    - "{{ domain }}.ssl.conf"

- name: Generate dhparams
  shell: openssl dhparam -out /etc/ssl/dhparams.pem 2048
  args:
    creates: /etc/ssl/dhparams.pem

- name: Uncomment ssl_dhparam line in configuration
  lineinfile:
    dest: /etc/nginx/global/server/ssl.conf
    regexp: "^# ssl_dhparam"
    line: "ssl_dhparam /etc/ssl/dhparams.pem;"
    backrefs: yes
    state: present

- name: Symlink default catchall
  file:
    src: "/etc/nginx/sites-available/default"
    dest: "/etc/nginx/sites-enabled/default"
    state: link

- name: Symlink non ssl domain (ssl domain symlink happens in letsencrypt role)
  file:
    src: "/etc/nginx/sites-available/{{ domain }}.nonssl.conf"
    dest: "/etc/nginx/sites-enabled/{{ domain }}.nonssl.conf"
    state: link
  notify: restart nginx
